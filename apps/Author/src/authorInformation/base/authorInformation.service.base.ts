/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  AuthorInformation as PrismaAuthorInformation,
} from "@prisma/client";

export class AuthorInformationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AuthorInformationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.authorInformation.count(args);
  }

  async authorInformations<T extends Prisma.AuthorInformationFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AuthorInformationFindManyArgs>
  ): Promise<PrismaAuthorInformation[]> {
    return this.prisma.authorInformation.findMany<Prisma.AuthorInformationFindManyArgs>(
      args
    );
  }
  async authorInformation<T extends Prisma.AuthorInformationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AuthorInformationFindUniqueArgs>
  ): Promise<PrismaAuthorInformation | null> {
    return this.prisma.authorInformation.findUnique(args);
  }
  async createAuthorInformation<T extends Prisma.AuthorInformationCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AuthorInformationCreateArgs>
  ): Promise<PrismaAuthorInformation> {
    return this.prisma.authorInformation.create<T>(args);
  }
  async updateAuthorInformation<T extends Prisma.AuthorInformationUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AuthorInformationUpdateArgs>
  ): Promise<PrismaAuthorInformation> {
    return this.prisma.authorInformation.update<T>(args);
  }
  async deleteAuthorInformation<T extends Prisma.AuthorInformationDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AuthorInformationDeleteArgs>
  ): Promise<PrismaAuthorInformation> {
    return this.prisma.authorInformation.delete(args);
  }
}
