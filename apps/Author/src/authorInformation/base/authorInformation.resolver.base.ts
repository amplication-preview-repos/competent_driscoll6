/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AuthorInformation } from "./AuthorInformation";
import { AuthorInformationCountArgs } from "./AuthorInformationCountArgs";
import { AuthorInformationFindManyArgs } from "./AuthorInformationFindManyArgs";
import { AuthorInformationFindUniqueArgs } from "./AuthorInformationFindUniqueArgs";
import { CreateAuthorInformationArgs } from "./CreateAuthorInformationArgs";
import { UpdateAuthorInformationArgs } from "./UpdateAuthorInformationArgs";
import { DeleteAuthorInformationArgs } from "./DeleteAuthorInformationArgs";
import { AuthorInformationService } from "../authorInformation.service";
@graphql.Resolver(() => AuthorInformation)
export class AuthorInformationResolverBase {
  constructor(protected readonly service: AuthorInformationService) {}

  async _authorInformationsMeta(
    @graphql.Args() args: AuthorInformationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AuthorInformation])
  async authorInformations(
    @graphql.Args() args: AuthorInformationFindManyArgs
  ): Promise<AuthorInformation[]> {
    return this.service.authorInformations(args);
  }

  @graphql.Query(() => AuthorInformation, { nullable: true })
  async authorInformation(
    @graphql.Args() args: AuthorInformationFindUniqueArgs
  ): Promise<AuthorInformation | null> {
    const result = await this.service.authorInformation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AuthorInformation)
  async createAuthorInformation(
    @graphql.Args() args: CreateAuthorInformationArgs
  ): Promise<AuthorInformation> {
    return await this.service.createAuthorInformation({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => AuthorInformation)
  async updateAuthorInformation(
    @graphql.Args() args: UpdateAuthorInformationArgs
  ): Promise<AuthorInformation | null> {
    try {
      return await this.service.updateAuthorInformation({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AuthorInformation)
  async deleteAuthorInformation(
    @graphql.Args() args: DeleteAuthorInformationArgs
  ): Promise<AuthorInformation | null> {
    try {
      return await this.service.deleteAuthorInformation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
