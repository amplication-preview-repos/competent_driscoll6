/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AuthorInformationService } from "../authorInformation.service";
import { AuthorInformationCreateInput } from "./AuthorInformationCreateInput";
import { AuthorInformation } from "./AuthorInformation";
import { AuthorInformationFindManyArgs } from "./AuthorInformationFindManyArgs";
import { AuthorInformationWhereUniqueInput } from "./AuthorInformationWhereUniqueInput";
import { AuthorInformationUpdateInput } from "./AuthorInformationUpdateInput";

export class AuthorInformationControllerBase {
  constructor(protected readonly service: AuthorInformationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AuthorInformation })
  async createAuthorInformation(
    @common.Body() data: AuthorInformationCreateInput
  ): Promise<AuthorInformation> {
    return await this.service.createAuthorInformation({
      data: data,
      select: {
        biography: true,
        createdAt: true,
        id: true,
        image: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AuthorInformation] })
  @ApiNestedQuery(AuthorInformationFindManyArgs)
  async authorInformations(
    @common.Req() request: Request
  ): Promise<AuthorInformation[]> {
    const args = plainToClass(AuthorInformationFindManyArgs, request.query);
    return this.service.authorInformations({
      ...args,
      select: {
        biography: true,
        createdAt: true,
        id: true,
        image: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AuthorInformation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async authorInformation(
    @common.Param() params: AuthorInformationWhereUniqueInput
  ): Promise<AuthorInformation | null> {
    const result = await this.service.authorInformation({
      where: params,
      select: {
        biography: true,
        createdAt: true,
        id: true,
        image: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AuthorInformation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAuthorInformation(
    @common.Param() params: AuthorInformationWhereUniqueInput,
    @common.Body() data: AuthorInformationUpdateInput
  ): Promise<AuthorInformation | null> {
    try {
      return await this.service.updateAuthorInformation({
        where: params,
        data: data,
        select: {
          biography: true,
          createdAt: true,
          id: true,
          image: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AuthorInformation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAuthorInformation(
    @common.Param() params: AuthorInformationWhereUniqueInput
  ): Promise<AuthorInformation | null> {
    try {
      return await this.service.deleteAuthorInformation({
        where: params,
        select: {
          biography: true,
          createdAt: true,
          id: true,
          image: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
