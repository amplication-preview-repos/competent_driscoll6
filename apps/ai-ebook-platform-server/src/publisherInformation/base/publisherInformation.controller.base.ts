/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PublisherInformationService } from "../publisherInformation.service";
import { PublisherInformationCreateInput } from "./PublisherInformationCreateInput";
import { PublisherInformation } from "./PublisherInformation";
import { PublisherInformationFindManyArgs } from "./PublisherInformationFindManyArgs";
import { PublisherInformationWhereUniqueInput } from "./PublisherInformationWhereUniqueInput";
import { PublisherInformationUpdateInput } from "./PublisherInformationUpdateInput";

export class PublisherInformationControllerBase {
  constructor(protected readonly service: PublisherInformationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PublisherInformation })
  async createPublisherInformation(
    @common.Body() data: PublisherInformationCreateInput
  ): Promise<PublisherInformation> {
    return await this.service.createPublisherInformation({
      data: data,
      select: {
        about: true,
        createdAt: true,
        id: true,
        logo: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PublisherInformation] })
  @ApiNestedQuery(PublisherInformationFindManyArgs)
  async publisherInformations(
    @common.Req() request: Request
  ): Promise<PublisherInformation[]> {
    const args = plainToClass(PublisherInformationFindManyArgs, request.query);
    return this.service.publisherInformations({
      ...args,
      select: {
        about: true,
        createdAt: true,
        id: true,
        logo: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PublisherInformation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async publisherInformation(
    @common.Param() params: PublisherInformationWhereUniqueInput
  ): Promise<PublisherInformation | null> {
    const result = await this.service.publisherInformation({
      where: params,
      select: {
        about: true,
        createdAt: true,
        id: true,
        logo: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PublisherInformation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePublisherInformation(
    @common.Param() params: PublisherInformationWhereUniqueInput,
    @common.Body() data: PublisherInformationUpdateInput
  ): Promise<PublisherInformation | null> {
    try {
      return await this.service.updatePublisherInformation({
        where: params,
        data: data,
        select: {
          about: true,
          createdAt: true,
          id: true,
          logo: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PublisherInformation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePublisherInformation(
    @common.Param() params: PublisherInformationWhereUniqueInput
  ): Promise<PublisherInformation | null> {
    try {
      return await this.service.deletePublisherInformation({
        where: params,
        select: {
          about: true,
          createdAt: true,
          id: true,
          logo: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
