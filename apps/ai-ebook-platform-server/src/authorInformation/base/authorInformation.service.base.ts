/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  AuthorInformation as PrismaAuthorInformation,
} from "@prisma/client";
import { LocalStorageService } from "src/storage/providers/local/local.storage.service";
import { InputJsonValue } from "src/types";
import { FileDownload, FileUpload } from "src/storage/base/storage.types";
import { LocalStorageFile } from "src/storage/providers/local/local.storage.types";

export class AuthorInformationServiceBase {
  constructor(
    protected readonly prisma: PrismaService,
    protected readonly localStorageService: LocalStorageService
  ) {}

  async count(
    args: Omit<Prisma.AuthorInformationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.authorInformation.count(args);
  }

  async authorInformations<T extends Prisma.AuthorInformationFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AuthorInformationFindManyArgs>
  ): Promise<PrismaAuthorInformation[]> {
    return this.prisma.authorInformation.findMany<Prisma.AuthorInformationFindManyArgs>(
      args
    );
  }
  async authorInformation<T extends Prisma.AuthorInformationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AuthorInformationFindUniqueArgs>
  ): Promise<PrismaAuthorInformation | null> {
    return this.prisma.authorInformation.findUnique(args);
  }
  async createAuthorInformation<T extends Prisma.AuthorInformationCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AuthorInformationCreateArgs>
  ): Promise<PrismaAuthorInformation> {
    return this.prisma.authorInformation.create<T>(args);
  }
  async updateAuthorInformation<T extends Prisma.AuthorInformationUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AuthorInformationUpdateArgs>
  ): Promise<PrismaAuthorInformation> {
    return this.prisma.authorInformation.update<T>(args);
  }
  async deleteAuthorInformation<T extends Prisma.AuthorInformationDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AuthorInformationDeleteArgs>
  ): Promise<PrismaAuthorInformation> {
    return this.prisma.authorInformation.delete(args);
  }

  async uploadImage<T extends Prisma.AuthorInformationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AuthorInformationFindUniqueArgs>,
    file: FileUpload
  ): Promise<PrismaAuthorInformation> {
    file.filename = `profilePicture-${args.where.id}.${file.filename
      .split(".")
      .pop()}`;
    const containerPath = "image";
    const image = await this.localStorageService.uploadFile(
      file,
      [],
      1000000,
      containerPath
    );

    return await this.prisma.authorInformation.update({
      where: args.where,

      data: {
        image: image as InputJsonValue,
      },
    });
  }

  async downloadImage<T extends Prisma.AuthorInformationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AuthorInformationFindUniqueArgs>
  ): Promise<FileDownload> {
    const { image } = await this.prisma.authorInformation.findUniqueOrThrow({
      where: args.where,
    });

    return await this.localStorageService.downloadFile(
      image as unknown as LocalStorageFile
    );
  }

  async deleteImage<T extends Prisma.AuthorInformationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AuthorInformationFindUniqueArgs>
  ): Promise<PrismaAuthorInformation> {
    const { image } = await this.prisma.authorInformation.findUniqueOrThrow({
      where: args.where,
    });

    await this.localStorageService.deleteFile(
      image as unknown as LocalStorageFile
    );

    return await this.prisma.authorInformation.update({
      where: args.where,

      data: {
        image: Prisma.DbNull,
      },
    });
  }
}
