/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request, Response } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { FileInterceptor } from "@nestjs/platform-express";
import { EbookMarketingService } from "../ebookMarketing.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { EbookMarketingCreateInput } from "./EbookMarketingCreateInput";
import { EbookMarketing } from "./EbookMarketing";
import { EbookMarketingFindManyArgs } from "./EbookMarketingFindManyArgs";
import { EbookMarketingWhereUniqueInput } from "./EbookMarketingWhereUniqueInput";
import { EbookMarketingUpdateInput } from "./EbookMarketingUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class EbookMarketingControllerBase {
  constructor(
    protected readonly service: EbookMarketingService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: EbookMarketing })
  @nestAccessControl.UseRoles({
    resource: "EbookMarketing",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createEbookMarketing(
    @common.Body() data: EbookMarketingCreateInput
  ): Promise<EbookMarketing> {
    return await this.service.createEbookMarketing({
      data: data,
      select: {
        category: true,
        cover: true,
        createdAt: true,
        description: true,
        id: true,
        keywords: true,
        pricing: true,
        subtitle: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [EbookMarketing] })
  @ApiNestedQuery(EbookMarketingFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "EbookMarketing",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async ebookMarketings(
    @common.Req() request: Request
  ): Promise<EbookMarketing[]> {
    const args = plainToClass(EbookMarketingFindManyArgs, request.query);
    return this.service.ebookMarketings({
      ...args,
      select: {
        category: true,
        cover: true,
        createdAt: true,
        description: true,
        id: true,
        keywords: true,
        pricing: true,
        subtitle: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: EbookMarketing })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "EbookMarketing",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async ebookMarketing(
    @common.Param() params: EbookMarketingWhereUniqueInput
  ): Promise<EbookMarketing | null> {
    const result = await this.service.ebookMarketing({
      where: params,
      select: {
        category: true,
        cover: true,
        createdAt: true,
        description: true,
        id: true,
        keywords: true,
        pricing: true,
        subtitle: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: EbookMarketing })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "EbookMarketing",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateEbookMarketing(
    @common.Param() params: EbookMarketingWhereUniqueInput,
    @common.Body() data: EbookMarketingUpdateInput
  ): Promise<EbookMarketing | null> {
    try {
      return await this.service.updateEbookMarketing({
        where: params,
        data: data,
        select: {
          category: true,
          cover: true,
          createdAt: true,
          description: true,
          id: true,
          keywords: true,
          pricing: true,
          subtitle: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: EbookMarketing })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "EbookMarketing",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteEbookMarketing(
    @common.Param() params: EbookMarketingWhereUniqueInput
  ): Promise<EbookMarketing | null> {
    try {
      return await this.service.deleteEbookMarketing({
        where: params,
        select: {
          category: true,
          cover: true,
          createdAt: true,
          description: true,
          id: true,
          keywords: true,
          pricing: true,
          subtitle: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Put(":id/cover")
  @common.UseInterceptors(FileInterceptor("file"))
  @swagger.ApiConsumes("multipart/form-data")
  @swagger.ApiBody({
    schema: {
      type: "object",

      properties: {
        file: {
          type: "string",
          format: "binary",
        },
      },
    },
  })
  @swagger.ApiParam({
    name: "id",
    type: "string",
    required: true,
  })
  @swagger.ApiCreatedResponse({
    type: EbookMarketing,
    status: "2XX",
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  async uploadCover(
    @common.Param()
    params: EbookMarketingWhereUniqueInput,
    @common.UploadedFile()
    file: Express.Multer.File
  ): Promise<EbookMarketing> {
    return this.service.uploadCover(
      {
        where: params,
      },
      Object.assign(file, {
        filename: file.originalname,
      })
    );
  }

  @common.Get(":id/cover")
  @swagger.ApiParam({
    name: "id",
    type: "string",
    required: true,
  })
  @swagger.ApiOkResponse({
    type: common.StreamableFile,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  async downloadCover(
    @common.Param()
    params: EbookMarketingWhereUniqueInput,
    @common.Res({
      passthrough: true,
    })
    res: Response
  ): Promise<common.StreamableFile> {
    const result = await this.service.downloadCover({
      where: params,
    });

    if (result === null) {
      throw new errors.NotFoundException(
        "No resource was found for ",
        JSON.stringify(params)
      );
    }

    res.setHeader(
      "Content-Disposition",
      `attachment; filename=${result.filename}`
    );
    res.setHeader("Content-Type", result.mimetype);
    return result.stream;
  }

  @common.Delete(":id/cover")
  @swagger.ApiOkResponse({
    type: EbookMarketing,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  async deleteCover(
    @common.Param()
    params: EbookMarketingWhereUniqueInput
  ): Promise<EbookMarketing> {
    return this.service.deleteCover({
      where: params,
    });
  }
}
