/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { EbookMarketing } from "./EbookMarketing";
import { EbookMarketingCountArgs } from "./EbookMarketingCountArgs";
import { EbookMarketingFindManyArgs } from "./EbookMarketingFindManyArgs";
import { EbookMarketingFindUniqueArgs } from "./EbookMarketingFindUniqueArgs";
import { CreateEbookMarketingArgs } from "./CreateEbookMarketingArgs";
import { UpdateEbookMarketingArgs } from "./UpdateEbookMarketingArgs";
import { DeleteEbookMarketingArgs } from "./DeleteEbookMarketingArgs";
import { EbookMarketingService } from "../ebookMarketing.service";
@graphql.Resolver(() => EbookMarketing)
export class EbookMarketingResolverBase {
  constructor(protected readonly service: EbookMarketingService) {}

  async _ebookMarketingsMeta(
    @graphql.Args() args: EbookMarketingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [EbookMarketing])
  async ebookMarketings(
    @graphql.Args() args: EbookMarketingFindManyArgs
  ): Promise<EbookMarketing[]> {
    return this.service.ebookMarketings(args);
  }

  @graphql.Query(() => EbookMarketing, { nullable: true })
  async ebookMarketing(
    @graphql.Args() args: EbookMarketingFindUniqueArgs
  ): Promise<EbookMarketing | null> {
    const result = await this.service.ebookMarketing(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => EbookMarketing)
  async createEbookMarketing(
    @graphql.Args() args: CreateEbookMarketingArgs
  ): Promise<EbookMarketing> {
    return await this.service.createEbookMarketing({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => EbookMarketing)
  async updateEbookMarketing(
    @graphql.Args() args: UpdateEbookMarketingArgs
  ): Promise<EbookMarketing | null> {
    try {
      return await this.service.updateEbookMarketing({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EbookMarketing)
  async deleteEbookMarketing(
    @graphql.Args() args: DeleteEbookMarketingArgs
  ): Promise<EbookMarketing | null> {
    try {
      return await this.service.deleteEbookMarketing(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
