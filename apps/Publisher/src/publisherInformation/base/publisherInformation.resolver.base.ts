/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PublisherInformation } from "./PublisherInformation";
import { PublisherInformationCountArgs } from "./PublisherInformationCountArgs";
import { PublisherInformationFindManyArgs } from "./PublisherInformationFindManyArgs";
import { PublisherInformationFindUniqueArgs } from "./PublisherInformationFindUniqueArgs";
import { CreatePublisherInformationArgs } from "./CreatePublisherInformationArgs";
import { UpdatePublisherInformationArgs } from "./UpdatePublisherInformationArgs";
import { DeletePublisherInformationArgs } from "./DeletePublisherInformationArgs";
import { PublisherInformationService } from "../publisherInformation.service";
@graphql.Resolver(() => PublisherInformation)
export class PublisherInformationResolverBase {
  constructor(protected readonly service: PublisherInformationService) {}

  async _publisherInformationsMeta(
    @graphql.Args() args: PublisherInformationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PublisherInformation])
  async publisherInformations(
    @graphql.Args() args: PublisherInformationFindManyArgs
  ): Promise<PublisherInformation[]> {
    return this.service.publisherInformations(args);
  }

  @graphql.Query(() => PublisherInformation, { nullable: true })
  async publisherInformation(
    @graphql.Args() args: PublisherInformationFindUniqueArgs
  ): Promise<PublisherInformation | null> {
    const result = await this.service.publisherInformation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PublisherInformation)
  async createPublisherInformation(
    @graphql.Args() args: CreatePublisherInformationArgs
  ): Promise<PublisherInformation> {
    return await this.service.createPublisherInformation({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PublisherInformation)
  async updatePublisherInformation(
    @graphql.Args() args: UpdatePublisherInformationArgs
  ): Promise<PublisherInformation | null> {
    try {
      return await this.service.updatePublisherInformation({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PublisherInformation)
  async deletePublisherInformation(
    @graphql.Args() args: DeletePublisherInformationArgs
  ): Promise<PublisherInformation | null> {
    try {
      return await this.service.deletePublisherInformation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
