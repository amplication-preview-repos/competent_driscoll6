/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  PublisherInformation as PrismaPublisherInformation,
} from "@prisma/client";

export class PublisherInformationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PublisherInformationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.publisherInformation.count(args);
  }

  async publisherInformations<
    T extends Prisma.PublisherInformationFindManyArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.PublisherInformationFindManyArgs>
  ): Promise<PrismaPublisherInformation[]> {
    return this.prisma.publisherInformation.findMany<Prisma.PublisherInformationFindManyArgs>(
      args
    );
  }
  async publisherInformation<
    T extends Prisma.PublisherInformationFindUniqueArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.PublisherInformationFindUniqueArgs>
  ): Promise<PrismaPublisherInformation | null> {
    return this.prisma.publisherInformation.findUnique(args);
  }
  async createPublisherInformation<
    T extends Prisma.PublisherInformationCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.PublisherInformationCreateArgs>
  ): Promise<PrismaPublisherInformation> {
    return this.prisma.publisherInformation.create<T>(args);
  }
  async updatePublisherInformation<
    T extends Prisma.PublisherInformationUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.PublisherInformationUpdateArgs>
  ): Promise<PrismaPublisherInformation> {
    return this.prisma.publisherInformation.update<T>(args);
  }
  async deletePublisherInformation<
    T extends Prisma.PublisherInformationDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.PublisherInformationDeleteArgs>
  ): Promise<PrismaPublisherInformation> {
    return this.prisma.publisherInformation.delete(args);
  }
}
